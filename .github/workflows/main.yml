# This is a basic workflow to help you get started with Actions

name: Build OpenWrt NanoPi R2S

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      # Runs a single command using the runners shell
      - name: Initialization environment
        run: |
          sudo apt update
          sudo apt install build-essential ccache ecj fastjar file g++ gawk \
          gettext git java-propose-classpath libelf-dev libncurses5-dev \
          libncursesw5-dev libssl-dev python python2.7-dev python3 unzip wget \
          python3-distutils python3-setuptools rsync subversion swig time \
          xsltproc zlib1g-dev 
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          
      # Runs a set of commands using the runners shell
      - name: Clone source code
        working-directory: /workdir
        run: |
          git clone https://git.openwrt.org/openwrt/openwrt.git
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a          

      - name: Load custom configuration
        run: |
          mv .config openwrt/.config

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"     

          
          
          
          
          
          
          
          
          
          
          
          
